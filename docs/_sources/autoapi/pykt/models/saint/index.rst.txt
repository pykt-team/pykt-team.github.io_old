:py:mod:`pykt.models.saint`
===========================

.. py:module:: pykt.models.saint


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pykt.models.saint.SAINT
   pykt.models.saint.Encoder_block
   pykt.models.saint.Decoder_block




Attributes
~~~~~~~~~~

.. autoapisummary::

   pykt.models.saint.device


.. py:data:: device
   

   

.. py:class:: SAINT(num_q, num_c, seq_len, emb_size, num_attn_heads, dropout, n_blocks=1, emb_type='qid', emb_path='', pretrain_dim=768)

   Bases: :py:obj:`torch.nn.Module`

   Base class for all neural network modules.

   Your models should also subclass this class.

   Modules can also contain other Modules, allowing to nest them in
   a tree structure. You can assign the submodules as regular attributes::

       import torch.nn as nn
       import torch.nn.functional as F

       class Model(nn.Module):
           def __init__(self):
               super(Model, self).__init__()
               self.conv1 = nn.Conv2d(1, 20, 5)
               self.conv2 = nn.Conv2d(20, 20, 5)

           def forward(self, x):
               x = F.relu(self.conv1(x))
               return F.relu(self.conv2(x))

   Submodules assigned in this way will be registered, and will have their
   parameters converted too when you call :meth:`to`, etc.

   :ivar training: Boolean represents whether this module is in training or
                   evaluation mode.
   :vartype training: bool

   .. py:method:: forward(self, in_ex, in_cat, in_res, qtest=False)



.. py:class:: Encoder_block(dim_model, heads_en, total_ex, total_cat, seq_len, dropout, emb_path='', pretrain_dim=768)

   Bases: :py:obj:`torch.nn.Module`

   M = SkipConct(Multihead(LayerNorm(Qin;Kin;Vin)))
   O = SkipConct(FFN(LayerNorm(M)))

   .. py:method:: forward(self, in_ex, in_cat, in_pos, first_block=True)



.. py:class:: Decoder_block(dim_model, total_res, heads_de, seq_len, dropout)

   Bases: :py:obj:`torch.nn.Module`

   M1 = SkipConct(Multihead(LayerNorm(Qin;Kin;Vin)))
   M2 = SkipConct(Multihead(LayerNorm(M1;O;O)))
   L = SkipConct(FFN(LayerNorm(M2)))

   .. py:method:: forward(self, in_res, in_pos, en_out, first_block=True)



