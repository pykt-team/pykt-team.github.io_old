:py:mod:`pykt.models.evaluate_model`
====================================

.. py:module:: pykt.models.evaluate_model


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   pykt.models.evaluate_model.save_cur_predict_result
   pykt.models.evaluate_model.evaluate
   pykt.models.evaluate_model.early_fusion
   pykt.models.evaluate_model.late_fusion
   pykt.models.evaluate_model.effective_fusion
   pykt.models.evaluate_model.group_fusion
   pykt.models.evaluate_model.save_question_res
   pykt.models.evaluate_model.evaluate_question
   pykt.models.evaluate_model.log2
   pykt.models.evaluate_model.calC
   pykt.models.evaluate_model.get_info_dkt_forget
   pykt.models.evaluate_model.evaluate_splitpred_question
   pykt.models.evaluate_model.get_cur_teststart
   pykt.models.evaluate_model.predict_each_group
   pykt.models.evaluate_model.save_each_question_res
   pykt.models.evaluate_model.cal_predres
   pykt.models.evaluate_model.prepare_data
   pykt.models.evaluate_model.predict_each_group2
   pykt.models.evaluate_model.save_currow_question_res



Attributes
~~~~~~~~~~

.. autoapisummary::

   pykt.models.evaluate_model.device


.. py:data:: device
   

   

.. py:function:: save_cur_predict_result(dres, q, r, d, t, m, sm, p)


.. py:function:: evaluate(model, test_loader, model_name, save_path='')


.. py:function:: early_fusion(curhs, model, model_name)


.. py:function:: late_fusion(dcur, curdf, fusion_type=['mean', 'vote', 'all'])


.. py:function:: effective_fusion(df, model, model_name, fusion_type)


.. py:function:: group_fusion(dmerge, model, model_name, fusion_type, fout)


.. py:function:: save_question_res(dres, fout, early=False)


.. py:function:: evaluate_question(model, test_loader, model_name, fusion_type=['early_fusion', 'late_fusion'], save_path='')


.. py:function:: log2(t)


.. py:function:: calC(row, data_config)


.. py:function:: get_info_dkt_forget(row, data_config)


.. py:function:: evaluate_splitpred_question(model, data_config, testf, model_name, save_path='', use_pred=False, train_ratio=0.2, atkt_pad=False)


.. py:function:: get_cur_teststart(is_repeat, train_ratio)


.. py:function:: predict_each_group(curdforget, dforget, is_repeat, qidx, uid, idx, curqin, curcin, currin, model_name, model, t, cq, cc, cr, end, fout, atkt_pad=False, maxlen=200)

   use the predict result as next question input



.. py:function:: save_each_question_res(dcres, dqres, ctrues, cpreds)


.. py:function:: cal_predres(dcres, dqres)


.. py:function:: prepare_data(model_name, is_repeat, qidx, curqin, curcin, currin, curdforget, cq, cc, cr, dforget, t, end, maxlen=200)


.. py:function:: predict_each_group2(curdforget, dforget, is_repeat, qidx, uid, idx, curqin, curcin, currin, model_name, model, t, cq, cc, cr, end, fout, atkt_pad=False, maxlen=200)

   not use the predict result



.. py:function:: save_currow_question_res(idx, dcres, dqres, qidxs, ctrues, cpreds, uid, fout)


